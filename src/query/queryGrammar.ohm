Query {
  Main = (Expression | MatchExpression) end
  Expression = (FromInstance | FromTemplate) Select
  MatchExpression = (FromInstance | FromTemplate) Match Select

  FromInstance = fromLiteral ident "/" ident
  FromTemplate = fromLiteral (asterisk | ident)

  Select = selectLiteral Path ("," Path)*
  Path = (Group | Policy | StepCond | Step) ("." (StepCond | Step))*
  Step = asterisk | ident
  StepCond = (asterisk | ident) PredicateExpression
  Group = groupLiteral "(" ident ")"
  Policy = policyLiteral "(" ident ")"

  PredicateExpression = "[" Predicate "]"
  Predicate = Predicate logic Predicate -- multi
            | Condition -- single
  Condition = shortcut? Value comparison Value -- comparison
            | shortcut? Value -- existence
  Match = matchLiteral Node (Relationship Node)*
  Node = "(" ident? PredicateExpression? ")"
  Relationship = arrowLeft RelationshipFilter? arrowRight
  RelationshipFilter = "[" ident? PredicateExpression? "]"

  Value = path | literal

  fromLiteral = "FROM"
  groupLiteral = "GROUP"
  matchLiteral = "MATCH"
  policyLiteral = "POLICY"
  selectLiteral = "SELECT"

  arrowLeft = "<-" | "-"
  arrowRight = "->" | "-"
  asterisk = "*"
  comparison = "=" | "!=" | ">=" | "<=" | ">" | "<"
  ident = letter (alnum | "_" | "-")*
  logic = "AND" | "OR"
  path = letter (alnum | "_" | "-" | ".")*
  literal = string | float | digit | bool
  bool = "true" | "false" | "TRUE" | "FALSE"
  shortcut = "@" | "#" | ":"
  string
    = "'" (~"'" any)* "'"
    | "\"" (~"\"" any)* "\""
  float   = digit? "." digit+
  singleComment = "//" (~"\n" any)*
  multiComment = "/*" (~"*/" any)* "*/"
  space := singleComment | multiComment | ...
}
